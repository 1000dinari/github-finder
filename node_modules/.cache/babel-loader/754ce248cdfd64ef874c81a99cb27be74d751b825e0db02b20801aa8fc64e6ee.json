{"ast":null,"code":"var _jsxFileName = \"/home/barbarik/js/github-finder/src/context/github/GithubContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport githubReducer from \"./GithubReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GithubContext = /*#__PURE__*/createContext();\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN;\nexport const GithubProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState);\n  const searchUsers = async text => {\n    setLoading();\n    const params = new URLSearchParams({\n      q: text\n    });\n    const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    const {\n      items\n    } = await response.json();\n    dispatch({\n      type: \"GET_USERS\",\n      payload: items\n    });\n  };\n  const getUser = async login => {\n    setLoading();\n    const response = await fetch(`${GITHUB_URL}/users/${login}`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    if (response.status === 404) {\n      window.location = \"/notfound\";\n    } else {\n      const data = await response.json();\n      dispatch({\n        type: \"GET_USER\",\n        payload: data\n      });\n    }\n  };\n  const getUserRepos = async login => {\n    setLoading();\n    const response = await fetch(`${GITHUB_URL}/users/${login}/repos`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    const items = [];\n    items = await response.json();\n    dispatch({\n      type: \"GET_USER_REPOS\",\n      payload: items\n    });\n  };\n  const setLoading = () => {\n    dispatch({\n      type: \"SET_LOADING\"\n    });\n  };\n  const deleteUsers = () => {\n    setLoading();\n    dispatch({\n      type: \"CLEAR_USERS\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: {\n      users: state.users,\n      loading: state.loading,\n      user: state.user,\n      repos: state.repos,\n      getUserRepos,\n      searchUsers,\n      deleteUsers,\n      getUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 12\n  }, this);\n};\n_s(GithubProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GithubProvider;\nexport default GithubContext;\nvar _c;\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"names":["createContext","useReducer","githubReducer","GithubContext","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","GITHUB_TOKEN","REACT_APP_GITHUB_TOKEN","GithubProvider","children","initialState","users","user","repos","loading","state","dispatch","searchUsers","text","setLoading","params","URLSearchParams","q","response","fetch","headers","Authorization","items","json","type","payload","getUser","login","status","window","location","data","getUserRepos","deleteUsers"],"sources":["/home/barbarik/js/github-finder/src/context/github/GithubContext.js"],"sourcesContent":["import {createContext, useReducer} from \"react\"\nimport githubReducer from \"./GithubReducer\"\n\nconst GithubContext = createContext()\n\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL\n\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN\n\nexport const GithubProvider = ({children}) => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false\n    }\n\n    const [state, dispatch] = useReducer(githubReducer, initialState)\n\n    const searchUsers = async (text) => {\n        setLoading()\n        const params = new URLSearchParams({\n            q: text\n        })\n\n        const response = await fetch(`${GITHUB_URL}/search/users?${params}`, \n        { headers:{\n            Authorization: `token ${GITHUB_TOKEN}`\n            }\n        })\n\n\n        const {items} = await response.json()\n        dispatch({\n            type:\"GET_USERS\",\n            payload: items\n        })\n        \n    }\n\n    const getUser = async (login) => {\n        setLoading()\n        \n        const response = await fetch(`${GITHUB_URL}/users/${login}`, \n        { headers:{\n            Authorization: `token ${GITHUB_TOKEN}`\n            }\n        })\n\n\n        if(response.status === 404)\n        {\n            window.location=\"/notfound\"\n        }\n        else\n        {\n            const data = await response.json()\n            dispatch({\n                type:\"GET_USER\",\n                payload: data,\n            })\n        }\n        \n    }\n\n    const getUserRepos = async (login) => {\n        setLoading()\n        \n        const response = await fetch(`${GITHUB_URL}/users/${login}/repos`,\n        {\n            headers:{\n                Authorization: `token ${GITHUB_TOKEN}`\n            }\n        })\n        const items = []\n        items = await response.json()\n        dispatch({\n            type:\"GET_USER_REPOS\",\n            payload: items,\n        })\n        \n    }\n\n\n    const setLoading = () => {\n        dispatch({\n            type:\"SET_LOADING\",\n        })\n    }\n\n    const deleteUsers = () =>\n    {\n        setLoading()\n        dispatch({\n            type:\"CLEAR_USERS\",\n        })\n    }\n\n    return <GithubContext.Provider value={{\n        users: state.users,\n        loading: state.loading,\n        user: state.user,\n        repos: state.repos,\n        getUserRepos,\n        searchUsers,\n        deleteUsers,\n        getUser,\n    }}>\n        {children}\n    </GithubContext.Provider>\n\n}\n\nexport default GithubContext"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}